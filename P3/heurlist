  ;#'(lambda (estado) (max-list (list-lado estado (lado-contrario (estado-lado-sgte-jugador estado)))))
  ;#'(lambda (estado) (max-list (list-lado estado (estado-lado-sgte-jugador estado))))
  
  ; Diferencia de semillas. (Heurística del jugador regular)
  ;#'(lambda (estado)( - (suma-fila 
  ;                         (estado-tablero estado) 
  ;                         (estado-lado-sgte-jugador estado)) 
  ;                      (suma-fila 
  ;                         (estado-tablero estado) 
  ;                         (lado-contrario (estado-lado-sgte-jugador estado)))))
  #'(lambda (estado) (suma-fila 
       (estado-tablero estado) 
       (estado-lado-sgte-jugador estado)))
  #'(lambda (estado) (suma-fila 
       (estado-tablero estado) 
       (lado-contrario (estado-lado-sgte-jugador estado))))

  ; Máximas semillas que me pueden robar. Si vamos ganando, buscamos que no nos roben muchas y si vamos perdiendo buscamos robar muchas.
  ;#'(lambda (estado) (if (< (get-tot 1) (get-tot 0))
  ;  (max-list-chained 0 estado)
  ;  (max-list-chained 1 estado)))  

  #'(lambda (estado) (max-list-chained 0 estado))
  #'(lambda (estado) (max-list-chained 1 estado))

  ; El máximo que me puedo llevar.
  ;#'(lambda (estado) (max-list (list-lado estado (lado-contrario (estado-lado-sgte-jugador estado)))))
  ; El máximo que se puede llevar el otro
  #'(lambda (estado) (max-list (list-lado estado (estado-lado-sgte-jugador estado))))

  ; Cuántos hoyos tiene el otro con alguna semilla.
  #'(lambda (estado) (length (remove-if-not #'(lambda (x) (= x 0)) 
   (list-lado estado (estado-lado-sgte-jugador estado)))))
  ; Cuántos hoyos tengo con 0 semillas. Interesa que tenga pocos hoyos el otro y muchos nosotros.
  #'(lambda (estado) (length (remove-if-not #'(lambda (x) (= x 0)) 
    (list-lado estado (lado-contrario (estado-lado-sgte-jugador estado))))))
  
  ; Tener hoyos a 1 es peor. Las que tengo yo menos las que tiene el otro.
  ;#'(lambda (estado) 
  ;  ( - (length (remove-if-not #'(lambda (x) (not (= x 1)))
  ;    (list-lado estado (lado-contrario (estado-lado-sgte-jugador estado)))))
  ;  (length (remove-if-not #'(lambda (x) (not (= x 1))) 
  ;    (list-lado estado (estado-lado-sgte-jugador estado))))))

  ; En cuántos hoyos no puede el otro robar semillas. Información sin más.
  #'(lambda (estado) (length (remove-if #'(lambda (x) (or (= x 0) (>= x 4))) 
    (list-lado estado (estado-lado-sgte-jugador estado)))))
  ; En cuántos hoyos no puedo robar semillas. Información sin más.
  ;#'(lambda (estado) (length (remove-if #'(lambda (x) (or (= x 0) (>= x 4)))
  ;  (list-lado estado (lado-contrario (estado-lado-sgte-jugador estado))))))
  
  
  ; En cuántos hoyos sí puedo robar semillas.
  ;#'(lambda (estado)
  ;  (-  (length (remove-if #'(lambda (x) (and (>= x 1) (< x 4)))
  ;    (list-lado estado (lado-contrario (estado-lado-sgte-jugador estado)))))
  ;  (length (remove-if #'(lambda (x) (and (>= x 1) (< x 4))) 
  ;    (list-lado estado (estado-lado-sgte-jugador estado))))))

  ;#'(lambda (estado) (length (remove-if #'(lambda (x) (and (>= x 1) (< x 4)))
  ;  (list-lado estado (lado-contrario (estado-lado-sgte-jugador estado))))))
  
  #'(lambda (estado) (length (remove-if #'(lambda (x) (and (>= x 1) (< x 4))) 
      (list-lado estado (estado-lado-sgte-jugador estado)))))
