;; Realiza la búsqueda en un problema según una estrategia
;;
;;    IN: problem     estructura con la información del problema.
;;        strategy     estrategia a seguir para la búsqueda.
;;    OUT: Evalúa a un único nodo meta o nil si no hay solución.
;;
;;    Utilizamos una auxiliar recursiva con la lista de nodos.
;;
;;    pseudocode:
;;
;;    aux_fun(problema estrategia lista_nodos)
;;        si lista_nodos no está vacía
;;            si ( es_solución first lista_nodos)
;;                first lista_nodos
;;            sino
;;                nueva_lista_nodos = insertar
;;                          (lista_nodos (expandir_nodo first lista_nodos) estrategia)
;;                aux_fun (problema estrategia nueva_lista_nodos)
;;    

(defun tree-search-aux (problem strategy open-nodes)
    (when open-nodes
        (let ((n (first open-nodes)))
            (if (fncall (problem-fn-goal-test problem) (node-state n))
              n
              (tree-search-aux problem strategy  
                    (insert-nodes-strategy 
                        (expand-node n problem)
                        (rest open-nodes)
                        strategy))))))

(defun tree-search (problem strategy)
  (tree-search-aux problem strategy (list (make-node
                                          :state (problem-initial-state problem)
                                          :depth 0
                                          :g 0
                                          :f 0))))

;; Examples
(tree-search *galaxy-M35* *A-STAR*)
;; #S(NODE
;;    :STATE SIRTIS
;;    :PARENT #S(NODE
;;               :STATE DAVION
;;               :PARENT #S(NODE
;;                          :STATE KATRIL
;;                          :PARENT #S(NODE
;;                                     :STATE KENTARES
;;                                     :PARENT NIL
;;                                     :ACTION NIL
;;                                     :DEPTH 0
;;                                     :G 0
;;                                     :H NIL
;;                                     :F 0)
;;                          :ACTION #S(ACTION
;;                                     :NAME NAVIGATE-WHITE-HOLE
;;                                     :ORIGIN KENTARES
;;                                     :FINAL KATRIL
;;                                     :COST 2)
;;                          :DEPTH 1
;;                          :G 2
;;                          :H 3
;;                          :F 5)
;;               :ACTION #S(ACTION
;;                          :NAME NAVIGATE-WORM-HOLE
;;                          :ORIGIN KATRIL
;;                          :FINAL DAVION
;;                          :COST 1)
;;               :DEPTH 2
;;               :G 3
;;               :H 1
;;               :F 4)
;;    :ACTION #S(ACTION
;;               :NAME NAVIGATE-WHITE-HOLE
;;               :ORIGIN DAVION
;;               :FINAL SIRTIS
;;               :COST 1)
;;    :DEPTH 3
;;    :G 4
;;    :H 0

;; end


; Realiza la búsqueda A* para el problema dado
; Evalúa:
;    Si no hay solución: NIL
; Si hay solución: el nodo correspondiente al estado-objetivo ;

(defun a-star-search (problem)
    (tree-search problem *A-star*))


(a-star-search *galaxy-M35*)
;; #S(NODE
;;    :STATE SIRTIS
;;    :PARENT #S(NODE
;;               :STATE DAVION
;;               :PARENT #S(NODE
;;                          :STATE KATRIL
;;                          :PARENT #S(NODE
;;                                     :STATE KENTARES
;;                                     :PARENT NIL
;;                                     :ACTION NIL
;;                                     :DEPTH 0
;;                                     :G 0
;;                                     :H NIL
;;                                     :F 0)
;;                          :ACTION #S(ACTION
;;                                     :NAME NAVIGATE-WHITE-HOLE
;;                                     :ORIGIN KENTARES
;;                                     :FINAL KATRIL
;;                                     :COST 2)
;;                          :DEPTH 1
;;                          :G 2
;;                          :H 3
;;                          :F 5)
;;               :ACTION #S(ACTION
;;                          :NAME NAVIGATE-WORM-HOLE
;;                          :ORIGIN KATRIL
;;                          :FINAL DAVION
;;                          :COST 1)
;;               :DEPTH 2
;;               :G 3
;;               :H 1
;;               :F 4)
;;    :ACTION #S(ACTION
;;               :NAME NAVIGATE-WHITE-HOLE
;;               :ORIGIN DAVION
;;               :FINAL SIRTIS
;;               :COST 1)
;;    :DEPTH 3
;;    :G 4
;;    :H 0
;;    :F 4)

;; end

;;%%

