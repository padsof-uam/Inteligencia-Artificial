;; Inserta una lista de nodos en otra (ya ordenada) de acuerdo con una estrategia.
;;
;; IN: 	nodes: lista de nodos para insertar.
;;		lst-nodes:	lista de nodos en la que insertar.
;;		strategy:	estrategia que seguir a la hora de insertar.
;; OUT:	una lista de nodos ordenados de acuerdo a la estrategia.
;;
;; pseudocode:
;;	insert-nodes(nodes lst strategy)
;;		iterar at1 en nodes
;;			iterar at2 en lst
;;				si ato1 < at2
;;					insertar ato1 y desplazar el resto
;;
;; Opción b (que encontramos mejor, porque modificar una lista sobre la que estamos iterando es peligroso)
;;	insert-nodes(nodes lst strategy acc)
;;		iterar at1 en nodes
;;			iterar at2 en lst
;;				si ato1 < at2
;;					insertar ato1 en acc
;;					insert-nodes (rest(nodes) lst-nodes strategy acc)
;;				sino
;;					insertar ato2 en acc
;;					insertar-nodes (nodes rest(lst-nodes) strategy acc)

(defun _aux-insert-nodes (nodes lst-nodes acc strategy)
	(if (null nodes)
		(append acc lst-nodes)
		(if (null lst-nodes)
			(append acc nodes)
			(if  (funcall (strategy-node-compare-p strategy) (car nodes) (car lst-nodes))

				(_aux-insert-nodes 
					(cdr nodes)
					lst-nodes
					(append acc (list (car nodes)))
					strategy)
				(_aux-insert-nodes
					nodes
					(cdr lst-nodes)
					(append acc (list (car lst-nodes)))
					strategy)))))

(defun insert-nodes (nodes lst-nodes strategy)
	(_aux-insert-nodes nodes lst-nodes '() strategy))

;; Examples
(insert-nodes 
	(list *node-00* *node-01* *node-02*) 
	*lst-nodes-0*
	*uniform-cost*)

;;Sale esto, que ni está ordenado ni nada.
;;(#S(NODE :STATE PROSERPINA 
;;	:PARENT NIL
;;	:ACTION NIL
;;	:DEPTH 12 :G 10 :H NIL :F 20)
;; #S(NODE :STATE AVALON 
;;	:PARENT NIL
;;	:ACTION NIL
;;	:DEPTH 0 :G 0 :H NIL :F 0)
;; #S(NODE :STATE MALLORY
;;	:PARENT #S(NODE :STATE PROSERPINA :PARENT NIL :ACTION NIL :DEPTH 12 :G 10 :H NIL :F 20)
;;	:ACTION #S(ACTION :NAME NAVIGATE-WORM-HOLE :ORIGIN PROSERPINA :FINAL MALLORY :COST 6)
;;	:DEPTH 13 :G 16 :H 7 :F 23)
;; #S(NODE :STATE SIRTIS
;;	:PARENT #S(NODE :STATE PROSERPINA :PARENT NIL :ACTION NIL :DEPTH 12 :G 10 :H NIL :F 20)
;;	:ACTION #S(ACTION :NAME NAVIGATE-WORM-HOLE :ORIGIN PROSERPINA :FINAL SIRTIS :COST 7)
;;	:DEPTH 13 :G 17 :H 0 :F 17)
;; #S(NODE :STATE KENTARES
;;	:PARENT #S(NODE :STATE PROSERPINA :PARENT NIL :ACTION NIL :DEPTH 12 :G 10 :H NIL :F 20)
;;	:ACTION #S(ACTION :NAME NAVIGATE-WORM-HOLE :ORIGIN PROSERPINA :FINAL KENTARES :COST 1)
;;	:DEPTH 13 :G 11 :H 4 :F 15)
;; #S(NODE :STATE MALLORY
;;	:PARENT #S(NODE :STATE PROSERPINA :PARENT NIL :ACTION NIL :DEPTH 12 :G 10 :H NIL :F 20)
;;	:ACTION #S(ACTION :NAME NAVIGATE-WHITE-HOLE :ORIGIN PROSERPINA :FINAL MALLORY :COST 7)
;;	:DEPTH 13 :G 17 :H 7 :F 24)
;; #S(NODE :STATE AVALON
;;	:PARENT #S(NODE :STATE PROSERPINA :PARENT NIL :ACTION NIL :DEPTH 12 :G 10 :H NIL :F 20)
;;	:ACTION #S(ACTION :NAME NAVIGATE-WHITE-HOLE :ORIGIN PROSERPINA :FINAL AVALON :COST 2)
;;	:DEPTH 13 :G 12 :H 5 :F 17)
;; #S(NODE :STATE DAVION
;;	:PARENT #S(NODE :STATE PROSERPINA :PARENT NIL :ACTION NIL :DEPTH 12 :G 10 :H NIL :F 20)
;;	:ACTION #S(ACTION :NAME NAVIGATE-WHITE-HOLE :ORIGIN PROSERPINA :FINAL DAVION :COST 4)
;;	:DEPTH 13 :G 14 :H 1 :F 15)
;; #S(NODE :STATE SIRTIS
;;	:PARENT #S(NODE :STATE PROSERPINA :PARENT NIL :ACTION NIL :DEPTH 12 :G 10 :H NIL :F 20)
;;	:ACTION #S(ACTION :NAME NAVIGATE-WHITE-HOLE :ORIGIN PROSERPINA :FINAL SIRTIS :COST 10)
;;	:DEPTH 13 :G 20 :H 0 :F 20)
;; #S(NODE :STATE KENTARES :PARENT NIL :ACTION NIL :DEPTH 2 :G 50 :H NIL :F 50))


;; end


